<?php

namespace Qui\core;

use Illuminate\Database\Capsule\Manager as Capsule;

/*
 * A wrapper around the PDO class, pulls DB data from .env for a connection.
 * Also exposes an eloquent query builder instance, which is the adapter the DB facade uses
 * */

/**
 * Class Database
 * @package Qui\core
 */
class Database
{
    public $pdo;
    public $eloquent;

    public function __construct()
    {
        try {
            // We can't use App::get('env') here since (most likely) it's yet to be defineds
            $DB_CLIENT = $_ENV['DB_CLIENT'];
            $DB_HOST = $_ENV['DB_HOST'];
            $DB_NAME = $_ENV['DB_NAME'];
            $DB_PORT = $_ENV['DB_PORT'];
            $DB_USERNAME = $_ENV['DB_USERNAME'];
            $DB_PASSWORD = $_ENV['DB_PASSWORD'];
            $DB_UNIX_SOCKET = $_ENV['DB_UNIX_SOCKET'];
            $opts = compact('DB_CLIENT', 'DB_HOST', 'DB_NAME', 'DB_PORT', 'DB_USERNAME', 'DB_PASSWORD', 'DB_UNIX_SOCKET');
            $this->setupPDO($opts);
            // no eloquent 4 u
//            $this->setupEloquent($opts);
        } catch (Exception $err) {
            dd($err);
        }
    }

    /**
     * @param $opts
     */
    private function setupPDO($opts) {

        $dsn = "{$opts['DB_CLIENT']}:host={$opts['DB_HOST']};dbname={$opts['DB_NAME']};port={$opts['DB_PORT']}";

        if ($opts['DB_UNIX_SOCKET']) {
            $dsn = "{$opts['DB_CLIENT']}:unix_socket={$opts['DB_UNIX_SOCKET']};dbname={$opts['DB_NAME']}";
        }

        $this->pdo = new \PDO($dsn, $opts['DB_USERNAME'], $opts['DB_PASSWORD'], [\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION]);
    }

    /**
     * @param $opts
     */
    private function setupEloquent($opts)
    {
        $capsule = new Capsule;

        $capsule->addConnection([
            'driver'    => $opts['DB_CLIENT'],
            'host'      => $opts['DB_HOST'],
            'database'  => $opts['DB_NAME'],
            'username'  => $opts['DB_USERNAME'],
            'password'  => $opts['DB_PASSWORD'],
            'charset'   => 'utf8',
            'collation' => 'utf8_unicode_ci',
            'prefix'    => '',
            'unix_socket' => $opts['DB_UNIX_SOCKET'] ?? ''
        ]);

        // Make this Capsule instance available globally via static methods
        $capsule->setAsGlobal();

        // Setup the Eloquent ORM
        $capsule->bootEloquent();

        $this->eloquent = $capsule;
    }
    
    /*
     * A little short hand for a query statement.
     * */
    /**
     * @param $sql
     * @param array $values
     * @return array
     */
    public function execute($sql, $values = [])
    {
        $results = [];
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($values);
        // If the query is a INSERT/UPDATE/DELETE type then ->fetch is undefined ofcourse
        // Hence why were just returning the boolean here
        if (gettype($stmt) == 'boolean') {
            return $stmt;
        }

        while ($row = $stmt->fetch()) {
            $results[] = $row;
        }
        return $results;
    }
}
